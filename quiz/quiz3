1)
.* is the element-wise multiplicatoin that does not obey the laws of linear algebra. Ex. a = [1 2 3 4], b = [1 2 3 4],  a.*b

ans =

     1     4     9    16
     
* is the matrix multiplication that obeys linear algebra rules. So you do row*columns. Ex. 
a =

     1     2
     3     4

>> b = [1 2;3 4]

b =

     1     2
     3     4

>> a*b

ans =

     7    10
    15    22

2)
sum(a.*b)

3)a)
if strcmp('s','MATLAB')
    disp('true')
else disp('false');

function:
function y = testString('string');
y = 's'
end



b) We can use == or we can use strcmp. The main difference between == and strcmp is that strcmp is the matlab recomeneded operator for s
for string compare, whereas == just checks to see which elements of the2 strings are 'equal'. == means charecter by charecter comparison 
and is strings are of differnt length, it will retturn an error

4)I - logical without shortcuiting(just works as an 'or' to matlab) - used to operate on logical vectors and scalers
II - is the logical with short circuting which is used for code effecinecy because it works as an 'or' and 'not' in Matlab.

5)>> a = 1;
>> b = 0;
>> x = a/b<10.0
x =
     0
 
6)I would use a structure array because I dont have to enter in (AOS(n).grade = 20 and AOS(n).name = 'foobar1') everytime to input a 
value into the structure. I can use the structure array and use MATLAB built in operator mean and sum to calculate the average.

7) 

function [y1,y2] = getRoot(a,b,c)
y1 = (b^2+sqrt(4*a*c-b))/2*a;
y2 = (b^2-sqrt(4*a*c-b))/2*a;
end
disp(num2str(y1), num2str(y2));

8) a = @(x,a,b)(integral(x^2+c*x+1),a,b)

9) 
function y = getFrac(n)
if (x>0);
y = fact(n);
end
disp(num2str(n));





